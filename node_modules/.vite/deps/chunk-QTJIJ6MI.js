import {
  CREATE,
  DELETE,
  DELETE_MANY,
  GET_LIST,
  GET_MANY,
  GET_MANY_REFERENCE,
  GET_ONE,
  HttpError_default,
  UPDATE,
  UPDATE_MANY,
  require_get,
  require_merge
} from "./chunk-JWMLWPKG.js";
import {
  ApolloClient,
  HttpLink,
  InMemoryCache
} from "./chunk-SGX6G7DU.js";
import {
  getIntrospectionQuery,
  gql
} from "./chunk-AB3SZ4KA.js";
import {
  __commonJS,
  __require,
  __toESM
} from "./chunk-AUZ3RYOM.js";

// node_modules/pluralize/pluralize.js
var require_pluralize = __commonJS({
  "node_modules/pluralize/pluralize.js"(exports, module) {
    (function(root, pluralize2) {
      if (typeof __require === "function" && typeof exports === "object" && typeof module === "object") {
        module.exports = pluralize2();
      } else if (typeof define === "function" && define.amd) {
        define(function() {
          return pluralize2();
        });
      } else {
        root.pluralize = pluralize2();
      }
    })(exports, function() {
      var pluralRules = [];
      var singularRules = [];
      var uncountables = {};
      var irregularPlurals = {};
      var irregularSingles = {};
      function sanitizeRule(rule) {
        if (typeof rule === "string") {
          return new RegExp("^" + rule + "$", "i");
        }
        return rule;
      }
      function restoreCase(word, token) {
        if (word === token)
          return token;
        if (word === word.toUpperCase())
          return token.toUpperCase();
        if (word[0] === word[0].toUpperCase()) {
          return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();
        }
        return token.toLowerCase();
      }
      function interpolate(str, args) {
        return str.replace(/\$(\d{1,2})/g, function(match, index) {
          return args[index] || "";
        });
      }
      function replace(word, rule) {
        return word.replace(rule[0], function(match, index) {
          var result = interpolate(rule[1], arguments);
          if (match === "") {
            return restoreCase(word[index - 1], result);
          }
          return restoreCase(match, result);
        });
      }
      function sanitizeWord(token, word, rules) {
        if (!token.length || uncountables.hasOwnProperty(token)) {
          return word;
        }
        var len = rules.length;
        while (len--) {
          var rule = rules[len];
          if (rule[0].test(word))
            return replace(word, rule);
        }
        return word;
      }
      function replaceWord(replaceMap, keepMap, rules) {
        return function(word) {
          var token = word.toLowerCase();
          if (keepMap.hasOwnProperty(token)) {
            return restoreCase(word, token);
          }
          if (replaceMap.hasOwnProperty(token)) {
            return restoreCase(word, replaceMap[token]);
          }
          return sanitizeWord(token, word, rules);
        };
      }
      function checkWord(replaceMap, keepMap, rules, bool) {
        return function(word) {
          var token = word.toLowerCase();
          if (keepMap.hasOwnProperty(token))
            return true;
          if (replaceMap.hasOwnProperty(token))
            return false;
          return sanitizeWord(token, token, rules) === token;
        };
      }
      function pluralize2(word, count, inclusive) {
        var pluralized = count === 1 ? pluralize2.singular(word) : pluralize2.plural(word);
        return (inclusive ? count + " " : "") + pluralized;
      }
      pluralize2.plural = replaceWord(
        irregularSingles,
        irregularPlurals,
        pluralRules
      );
      pluralize2.isPlural = checkWord(
        irregularSingles,
        irregularPlurals,
        pluralRules
      );
      pluralize2.singular = replaceWord(
        irregularPlurals,
        irregularSingles,
        singularRules
      );
      pluralize2.isSingular = checkWord(
        irregularPlurals,
        irregularSingles,
        singularRules
      );
      pluralize2.addPluralRule = function(rule, replacement) {
        pluralRules.push([sanitizeRule(rule), replacement]);
      };
      pluralize2.addSingularRule = function(rule, replacement) {
        singularRules.push([sanitizeRule(rule), replacement]);
      };
      pluralize2.addUncountableRule = function(word) {
        if (typeof word === "string") {
          uncountables[word.toLowerCase()] = true;
          return;
        }
        pluralize2.addPluralRule(word, "$0");
        pluralize2.addSingularRule(word, "$0");
      };
      pluralize2.addIrregularRule = function(single, plural) {
        plural = plural.toLowerCase();
        single = single.toLowerCase();
        irregularSingles[single] = plural;
        irregularPlurals[plural] = single;
      };
      [
        // Pronouns.
        ["I", "we"],
        ["me", "us"],
        ["he", "they"],
        ["she", "they"],
        ["them", "them"],
        ["myself", "ourselves"],
        ["yourself", "yourselves"],
        ["itself", "themselves"],
        ["herself", "themselves"],
        ["himself", "themselves"],
        ["themself", "themselves"],
        ["is", "are"],
        ["was", "were"],
        ["has", "have"],
        ["this", "these"],
        ["that", "those"],
        // Words ending in with a consonant and `o`.
        ["echo", "echoes"],
        ["dingo", "dingoes"],
        ["volcano", "volcanoes"],
        ["tornado", "tornadoes"],
        ["torpedo", "torpedoes"],
        // Ends with `us`.
        ["genus", "genera"],
        ["viscus", "viscera"],
        // Ends with `ma`.
        ["stigma", "stigmata"],
        ["stoma", "stomata"],
        ["dogma", "dogmata"],
        ["lemma", "lemmata"],
        ["schema", "schemata"],
        ["anathema", "anathemata"],
        // Other irregular rules.
        ["ox", "oxen"],
        ["axe", "axes"],
        ["die", "dice"],
        ["yes", "yeses"],
        ["foot", "feet"],
        ["eave", "eaves"],
        ["goose", "geese"],
        ["tooth", "teeth"],
        ["quiz", "quizzes"],
        ["human", "humans"],
        ["proof", "proofs"],
        ["carve", "carves"],
        ["valve", "valves"],
        ["looey", "looies"],
        ["thief", "thieves"],
        ["groove", "grooves"],
        ["pickaxe", "pickaxes"],
        ["whiskey", "whiskies"]
      ].forEach(function(rule) {
        return pluralize2.addIrregularRule(rule[0], rule[1]);
      });
      [
        [/s?$/i, "s"],
        [/[^\u0000-\u007F]$/i, "$0"],
        [/([^aeiou]ese)$/i, "$1"],
        [/(ax|test)is$/i, "$1es"],
        [/(alias|[^aou]us|tlas|gas|ris)$/i, "$1es"],
        [/(e[mn]u)s?$/i, "$1s"],
        [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, "$1"],
        [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, "$1i"],
        [/(alumn|alg|vertebr)(?:a|ae)$/i, "$1ae"],
        [/(seraph|cherub)(?:im)?$/i, "$1im"],
        [/(her|at|gr)o$/i, "$1oes"],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, "$1a"],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, "$1a"],
        [/sis$/i, "ses"],
        [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, "$1$2ves"],
        [/([^aeiouy]|qu)y$/i, "$1ies"],
        [/([^ch][ieo][ln])ey$/i, "$1ies"],
        [/(x|ch|ss|sh|zz)$/i, "$1es"],
        [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, "$1ices"],
        [/(m|l)(?:ice|ouse)$/i, "$1ice"],
        [/(pe)(?:rson|ople)$/i, "$1ople"],
        [/(child)(?:ren)?$/i, "$1ren"],
        [/eaux$/i, "$0"],
        [/m[ae]n$/i, "men"],
        ["thou", "you"]
      ].forEach(function(rule) {
        return pluralize2.addPluralRule(rule[0], rule[1]);
      });
      [
        [/s$/i, ""],
        [/(ss)$/i, "$1"],
        [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, "$1fe"],
        [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, "$1f"],
        [/ies$/i, "y"],
        [/\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, "$1ie"],
        [/\b(mon|smil)ies$/i, "$1ey"],
        [/(m|l)ice$/i, "$1ouse"],
        [/(seraph|cherub)im$/i, "$1"],
        [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, "$1"],
        [/(analy|ba|diagno|parenthe|progno|synop|the|empha|cri)(?:sis|ses)$/i, "$1sis"],
        [/(movie|twelve|abuse|e[mn]u)s$/i, "$1"],
        [/(test)(?:is|es)$/i, "$1is"],
        [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, "$1us"],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, "$1um"],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, "$1on"],
        [/(alumn|alg|vertebr)ae$/i, "$1a"],
        [/(cod|mur|sil|vert|ind)ices$/i, "$1ex"],
        [/(matr|append)ices$/i, "$1ix"],
        [/(pe)(rson|ople)$/i, "$1rson"],
        [/(child)ren$/i, "$1"],
        [/(eau)x?$/i, "$1"],
        [/men$/i, "man"]
      ].forEach(function(rule) {
        return pluralize2.addSingularRule(rule[0], rule[1]);
      });
      [
        // Singular words with no plurals.
        "adulthood",
        "advice",
        "agenda",
        "aid",
        "alcohol",
        "ammo",
        "anime",
        "athletics",
        "audio",
        "bison",
        "blood",
        "bream",
        "buffalo",
        "butter",
        "carp",
        "cash",
        "chassis",
        "chess",
        "clothing",
        "cod",
        "commerce",
        "cooperation",
        "corps",
        "debris",
        "diabetes",
        "digestion",
        "elk",
        "energy",
        "equipment",
        "excretion",
        "expertise",
        "flounder",
        "fun",
        "gallows",
        "garbage",
        "graffiti",
        "headquarters",
        "health",
        "herpes",
        "highjinks",
        "homework",
        "housework",
        "information",
        "jeans",
        "justice",
        "kudos",
        "labour",
        "literature",
        "machinery",
        "mackerel",
        "mail",
        "media",
        "mews",
        "moose",
        "music",
        "manga",
        "news",
        "pike",
        "plankton",
        "pliers",
        "pollution",
        "premises",
        "rain",
        "research",
        "rice",
        "salmon",
        "scissors",
        "series",
        "sewage",
        "shambles",
        "shrimp",
        "species",
        "staff",
        "swine",
        "tennis",
        "traffic",
        "transporation",
        "trout",
        "tuna",
        "wealth",
        "welfare",
        "whiting",
        "wildebeest",
        "wildlife",
        "you",
        // Regexes.
        /[^aeiou]ese$/i,
        // "chinese", "japanese"
        /deer$/i,
        // "deer", "reindeer"
        /fish$/i,
        // "fish", "blowfish", "angelfish"
        /measles$/i,
        /o[iu]s$/i,
        // "carnivorous"
        /pox$/i,
        // "chickpox", "smallpox"
        /sheep$/i
      ].forEach(pluralize2.addUncountableRule);
      return pluralize2;
    });
  }
});

// node_modules/ra-data-graphql/dist/esm/index.js
var import_merge = __toESM(require_merge());
var import_get = __toESM(require_get());
var import_pluralize = __toESM(require_pluralize());

// node_modules/ra-data-graphql/dist/esm/buildApolloClient.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var buildApolloClient_default = function(options) {
  if (!options) {
    return new ApolloClient({
      cache: new InMemoryCache().restore({})
    });
  }
  var _a2 = options.cache, cache = _a2 === void 0 ? new InMemoryCache().restore({}) : _a2, uri = options.uri, credentials = options.credentials, headers = options.headers, _b = options.link, link = _b === void 0 ? !!uri ? new HttpLink({ uri, credentials, headers }) : void 0 : _b, otherOptions = __rest(options, ["cache", "uri", "credentials", "headers", "link"]);
  return new ApolloClient(__assign({ link, cache }, otherOptions));
};

// node_modules/ra-data-graphql/dist/esm/constants.js
var QUERY_TYPES = [GET_LIST, GET_MANY, GET_MANY_REFERENCE, GET_ONE];
var MUTATION_TYPES = [
  CREATE,
  UPDATE,
  DELETE,
  UPDATE_MANY,
  DELETE_MANY
];
var ALL_TYPES = QUERY_TYPES.concat(MUTATION_TYPES);

// node_modules/ra-data-graphql/dist/esm/introspection.js
var __makeTemplateObject = function(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
};
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var introspectSchema = function(client, options) {
  return __awaiter(void 0, void 0, void 0, function() {
    var schema, _a2, queries, types, resources;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (!options.schema)
            return [3, 1];
          _a2 = options.schema;
          return [3, 3];
        case 1:
          return [4, fetchSchema(client)];
        case 2:
          _a2 = _b.sent();
          _b.label = 3;
        case 3:
          schema = _a2;
          queries = getQueriesFromSchema(schema);
          types = getTypesFromSchema(schema);
          resources = getResources(types, queries, options);
          return [2, {
            types,
            queries,
            resources,
            schema
          }];
      }
    });
  });
};
var fetchSchema = function(client) {
  return client.query({
    fetchPolicy: "network-only",
    query: gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n                ", "\n            "], ["\n                ", "\n            "])), getIntrospectionQuery())
  }).then(function(_a2) {
    var __schema = _a2.data.__schema;
    return __schema;
  });
};
var getQueriesFromSchema = function(schema) {
  return schema.types.reduce(function(acc, type) {
    var _a2, _b;
    if (type.name !== ((_a2 = schema.queryType) === null || _a2 === void 0 ? void 0 : _a2.name) && type.name !== ((_b = schema.mutationType) === null || _b === void 0 ? void 0 : _b.name) && type.fields) {
      return acc;
    }
    return __spreadArray(__spreadArray([], acc, true), type.fields || [], true);
  }, []);
};
var getTypesFromSchema = function(schema) {
  return schema.types.filter(function(type) {
    return type.name !== (schema.queryType && schema.queryType.name) && type.name !== (schema.mutationType && schema.mutationType.name);
  });
};
var getResources = function(types, queries, options) {
  var filteredResources = types.filter(function(type) {
    return isResource(type, queries, options);
  });
  return filteredResources.map(function(type) {
    return buildResource(type, queries, options);
  });
};
var isResource = function(type, queries, options) {
  if (isResourceIncluded(type, options))
    return true;
  if (isResourceExcluded(type, options))
    return false;
  var operations = Object.keys(options.operationNames).map(function(operation) {
    return options.operationNames[operation](type);
  });
  var hasAtLeastOneOperation = operations.some(function(operation) {
    return queries.find(function(_a2) {
      var name = _a2.name;
      return name === operation;
    });
  });
  return hasAtLeastOneOperation;
};
var isResourceIncluded = function(type, _a2) {
  var _b = _a2 === void 0 ? {} : _a2, include = _b.include;
  if (Array.isArray(include)) {
    return include.includes(type.name);
  }
  if (typeof include === "function") {
    return include(type);
  }
  return false;
};
var isResourceExcluded = function(type, _a2) {
  var _b = _a2 === void 0 ? {} : _a2, exclude = _b.exclude;
  if (Array.isArray(exclude)) {
    return exclude.includes(type.name);
  }
  if (typeof exclude === "function") {
    return exclude(type);
  }
  return false;
};
var buildResource = function(type, queries, options) {
  return ALL_TYPES.reduce(function(acc, raFetchMethod) {
    var _a2;
    var query = queries.find(function(_a3) {
      var name = _a3.name;
      return options.operationNames[raFetchMethod] && name === options.operationNames[raFetchMethod](type);
    });
    if (!query)
      return acc;
    return __assign2(__assign2({}, acc), (_a2 = {}, _a2[raFetchMethod] = query, _a2));
  }, { type });
};
var templateObject_1;

// node_modules/ra-data-graphql/dist/esm/index.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator2 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __rest2 = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var _a;
var QUERY_TYPES2 = QUERY_TYPES;
var MUTATION_TYPES2 = MUTATION_TYPES;
var ALL_TYPES2 = ALL_TYPES;
var RaFetchMethodMap = {
  getList: GET_LIST,
  getMany: GET_MANY,
  getManyReference: GET_MANY_REFERENCE,
  getOne: GET_ONE,
  create: CREATE,
  delete: DELETE,
  deleteMany: DELETE_MANY,
  update: UPDATE,
  updateMany: UPDATE_MANY
};
var defaultOptions = {
  resolveIntrospection: introspectSchema,
  introspection: {
    operationNames: (_a = {}, _a[GET_LIST] = function(resource) {
      return "all".concat((0, import_pluralize.default)(resource.name));
    }, _a[GET_ONE] = function(resource) {
      return "".concat(resource.name);
    }, _a[GET_MANY] = function(resource) {
      return "all".concat((0, import_pluralize.default)(resource.name));
    }, _a[GET_MANY_REFERENCE] = function(resource) {
      return "all".concat((0, import_pluralize.default)(resource.name));
    }, _a[CREATE] = function(resource) {
      return "create".concat(resource.name);
    }, _a[UPDATE] = function(resource) {
      return "update".concat(resource.name);
    }, _a[DELETE] = function(resource) {
      return "delete".concat(resource.name);
    }, _a),
    exclude: void 0,
    include: void 0
  }
};
var getOptions = function(options, raFetchMethod, resource) {
  if (typeof options === "function") {
    return options(resource, raFetchMethod);
  }
  return options;
};
var esm_default = function(options) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var _a2, clientObject, clientOptions, introspection, resolveIntrospection, buildQueryFactory, _b, override, otherOptions, client, introspectionResults, introspectionResultsPromise, raDataProvider;
    return __generator2(this, function(_c) {
      _a2 = (0, import_merge.default)({}, defaultOptions, options), clientObject = _a2.client, clientOptions = _a2.clientOptions, introspection = _a2.introspection, resolveIntrospection = _a2.resolveIntrospection, buildQueryFactory = _a2.buildQuery, _b = _a2.override, override = _b === void 0 ? {} : _b, otherOptions = __rest2(_a2, ["client", "clientOptions", "introspection", "resolveIntrospection", "buildQuery", "override"]);
      if (override && false) {
        console.warn(
          // eslint-disable-line
          "The override option is deprecated. You should instead wrap the buildQuery function provided by the dataProvider you use."
        );
      }
      client = clientObject || buildApolloClient_default(clientOptions);
      raDataProvider = new Proxy(defaultDataProvider, {
        get: function(target, name) {
          if (typeof name === "symbol" || name === "then") {
            return;
          }
          var raFetchMethod = RaFetchMethodMap[name];
          return function(resource, params) {
            return __awaiter2(void 0, void 0, void 0, function() {
              var buildQuery, overriddenBuildQuery, _a3, parseResponse, query, operation, apolloQuery_1, apolloQuery;
              return __generator2(this, function(_b2) {
                switch (_b2.label) {
                  case 0:
                    if (!introspection)
                      return [3, 2];
                    if (!introspectionResultsPromise) {
                      introspectionResultsPromise = resolveIntrospection(client, introspection);
                    }
                    return [4, introspectionResultsPromise];
                  case 1:
                    introspectionResults = _b2.sent();
                    _b2.label = 2;
                  case 2:
                    buildQuery = buildQueryFactory(introspectionResults);
                    overriddenBuildQuery = (0, import_get.default)(override, "".concat(resource, ".").concat(raFetchMethod));
                    _a3 = overriddenBuildQuery ? __assign3(__assign3({}, buildQuery(raFetchMethod, resource, params)), overriddenBuildQuery(params)) : buildQuery(raFetchMethod, resource, params), parseResponse = _a3.parseResponse, query = __rest2(_a3, ["parseResponse"]);
                    operation = getQueryOperation(query.query);
                    if (operation === "query") {
                      apolloQuery_1 = __assign3(__assign3(__assign3({}, query), { fetchPolicy: "network-only" }), getOptions(otherOptions.query, raFetchMethod, resource));
                      return [2, client.query(apolloQuery_1).then(function(response) {
                        return parseResponse(response);
                      }).catch(handleError)];
                    }
                    apolloQuery = __assign3({ mutation: query.query, variables: query.variables }, getOptions(otherOptions.mutation, raFetchMethod, resource));
                    return [2, client.mutate(apolloQuery).then(parseResponse).catch(handleError)];
                }
              });
            });
          };
        }
      });
      return [2, raDataProvider];
    });
  });
};
var handleError = function(error) {
  var _a2, _b;
  if (error === null || error === void 0 ? void 0 : error.networkError) {
    throw new HttpError_default((_a2 = error === null || error === void 0 ? void 0 : error.networkError) === null || _a2 === void 0 ? void 0 : _a2.message, (_b = error === null || error === void 0 ? void 0 : error.networkError) === null || _b === void 0 ? void 0 : _b.statusCode);
  }
  throw new HttpError_default(error.message, 200, error);
};
var getQueryOperation = function(query) {
  if (query && query.definitions && query.definitions.length > 0) {
    return query.definitions[0].operation;
  }
  throw new Error("Unable to determine the query operation");
};
var defaultDataProvider = {
  create: function() {
    return Promise.resolve({ data: null });
  },
  delete: function() {
    return Promise.resolve({ data: null });
  },
  deleteMany: function() {
    return Promise.resolve({ data: [] });
  },
  getList: function() {
    return Promise.resolve({ data: [], total: 0 });
  },
  getMany: function() {
    return Promise.resolve({ data: [] });
  },
  getManyReference: function() {
    return Promise.resolve({ data: [], total: 0 });
  },
  getOne: function() {
    return Promise.resolve({ data: null });
  },
  update: function() {
    return Promise.resolve({ data: null });
  },
  updateMany: function() {
    return Promise.resolve({ data: [] });
  }
  // avoids adding a context in tests
};

export {
  introspectSchema,
  isResourceIncluded,
  isResourceExcluded,
  QUERY_TYPES2 as QUERY_TYPES,
  MUTATION_TYPES2 as MUTATION_TYPES,
  ALL_TYPES2 as ALL_TYPES,
  esm_default
};
//# sourceMappingURL=chunk-QTJIJ6MI.js.map
